<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[OneLink]]></title>
    <url>%2F2020%2F08%2F10%2FOneLink%2F</url>
    <content type="text"><![CDATA[测试]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2020%2F03%2F23%2FHttpURLConnection%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[平常都是使用postman联调本程序接口。两个系统之间接口的联调如何用代码实现呢？1HttpURLConnection 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162BufferedWriter writer = null;BufferedReader reader = null;HttpURLConnection connect = null;JSONObject json = new JSONObject();try&#123; //此处封装所需要的参数,以requestbody举例 json.put("XXX","XXX"); json.put("XXX","XXX"); String jsonStr = json.toJsonString(); URL url = new URL("此处填写接口地址"); connect = (HttpURLConnection)url.openConnection(); connect.setDoInput(true); connect.setDoOutput(true); connect.setRequestMethod("POST"); connect.addRequestProperty("Content-Type", "application/json"); connect.connect(); OutputStream out = connect.getOutputStream(); writer = new BufferedWriter(new OutputStreamWriter(out)); //拼接requestbody内参数 writer.writer("[\n" + " &#123;\n" + " \"XX\": \""+json.getString("XX")+"\",\n" + " \"XX\": \""+json.getString("XX")+"\"\n" + " &#125;\n" + "]"); /** * writer.writer("["+jsonStr+"]"); **/ writer.flush(); reader = new BufferedReader(new InputStreamReader(connect.getInputStream())); StringBuilder response = new StringBuilder(); String line; while ((line = reader.readLine()) != null) &#123; response.append(line); &#125; String str = response.toString(); JSONObject info = JSON.parseObject(str); return info;&#125;catch(Exception e)&#123; e.printStackTrace();&#125;finally&#123; if(writer != null)&#123; try&#123; writer.close(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125; if(reader != null)&#123; try&#123; reader.close(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; &#125; if(connect != null)&#123; connect.disconnect(); &#125; return null;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux:启动tomact，jsp报错classNotFound]]></title>
    <url>%2F2020%2F01%2F03%2FLinux-%E5%90%AF%E5%8A%A8tomact%EF%BC%8Cjsp%E6%8A%A5%E9%94%99classNotFound%2F</url>
    <content type="text"><![CDATA[今天重启服务器，项目的前端页面JSP全部报错404.找了一下错误，原来之前发包的时候用root权限发了一次包，work文件夹权限变更，后来用普通权限发包的时候无权限向work文件夹存文件，导致页面404. 解决方法：清空work文件夹。重新发包。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>jsp</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[13-罗马数字转整数]]></title>
    <url>%2F2019%2F12%2F24%2F13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[7-整数反转]]></title>
    <url>%2F2019%2F12%2F18%2F7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 示例1： 12输入: 123输出: 321 示例 2: 12输入: -123输出: -321 示例 3: 12输入: 120输出: 21 注意: 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31, 2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。 方法：弹出和推入数字 &amp; 溢出前进行检查思路 我们可以一次构建反转整数的一位数字。在这样做的时候，我们可以预先检查向原整数附加另一位数字是否会导致溢出。 算法 反转整数的方法可以与反转字符串进行类比。 我们想重复“弹出” x 的最后一位数字，并将它“推入”到rev 的后面。最后，rev 将与 x 相反。 要在没有辅助堆栈 / 数组的帮助下 “弹出” 和 “推入” 数字，我们可以使用数学方法。 1234567//pop operation:pop = x % 10;x /= 10;//push operation:temp = rev * 10 + pop;rev = temp; 但是，这种方法很危险，因为当 temp = rev . 10 + pop 时会导致溢出。 幸运的是，事先检查这个语句是否会导致溢出很容易。 为了便于解释，我们假设 rev 是正数。 如果 temp = rev . 10 + pop 导致溢出，那么一定有 rev ≥ INTMAX/10。 如果 rev ≥ INTMAX/10，那么temp = rev . 10 + pop一定会溢出。 如果 rev == INTMAX/10，那么只要 pop&gt;7，temp = rev . 10 + pop 就会溢出。 当 rev 为负时可以应用类似的逻辑。 1234567891011121314151617class Solution &#123; public int reverse(int x) &#123; int rev = 0; while (x != 0) &#123; int pop = x % 10; x /= 10; if (rev &gt; Integer.MAX_VALUE / 10 || (rev == Integer.MAX_VALUE / 10 &amp;&amp; pop &gt; 7)) &#123; return 0; &#125; if (rev &lt; Integer.MIN_VALUE / 10 || (rev == Integer.MIN_VALUE / 10 &amp;&amp; pop &lt; -8)) &#123; return 0; &#125; rev = rev * 10 + pop; &#125; return rev; &#125;&#125; 复杂度分析 时间复杂度：O(log(x))，x 中大约有 log10(x) 位数字。 空间复杂度：O(1)。]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F12%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[System.out.println(“Hello World!”);]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>输出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[backup-mysql]]></title>
    <url>%2F2019%2F12%2F02%2Fbackup-mysql%2F</url>
    <content type="text"><![CDATA[​ 今天要给我们的数据库做备份,防止数据丢失造成损失,因为我们用的数据库采用的是MySQL,所以备份操作用MySQL自带的MySQL dump,话不多说开始吧. ​ 首先写一段sh脚本用来做备份操作. 12345678910111213141516#!/bin/bash# 用来备份钉钉机器人和小创大脑数据库# dingding库全量备份,包含小创大脑配置的数据和表结构# robot库全量备份,包含机器人配置的数据和表结构BCK_DIR=&quot;/home/DingTalk/mysql/backup&quot;DATE=`date +%F`user=&quot;user&quot;password=&quot;password&quot;mkdir -p $BCK_DIR/dingdingmkdir -p $BCK_DIR/robot#全量备份dingding和robot库/home/mysql/mysql/bin/mysqldump --opt --single-transaction -R - u$user -p$password --master-data=2 dingding | gzip --fast &gt; $BCK_DIR/dingding/dingding_$DATE.sql.gz/home/mysql/mysql/bin/mysqldump --opt --single-transaction -R - u$user -p$password --master-data=2 robot | gzip --fast &gt; $BCK_DIR/robot/robot_$DATE.sql.gz ​ 脚本我是用notepad++写的,写的时候注意文档格式转换为Unix编码. ​ 考虑到白天会有对数据库进行操作的任务,所以定时任务为每天零点零分执行一次备份.linux服务器上采用crontab进行定时任务. 编辑定时任务 123crontab -evim0 0 * * * /home/DingTalk/mysql/DingTalk-mysql-backup.sh(此处换成你自己的脚本存放位置和名字) 查看定时任务 1crontab -l 如果列表中有新添加的脚本说明成功.可以在凌晨确认一哈脚本是否正确运行!指定文件夹是否有备份的sql压缩包.]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysqldump</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1.两数之和]]></title>
    <url>%2F2019%2F09%2F30%2F1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下 标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 1234给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 解: 123456789101112131415class Solution &#123; public int[] twoSum(int[] nums, int target)&#123; Map&lt;Integer, Integer&gt; hashMap = new HashMap&lt;&gt;(); for (int i = 0; i &lt; nums.length; i++) &#123; hashMap.put(nums[i], i); &#125; for (int i = 0; i &lt; nums.length; i++) &#123; int a = target - nums[i]; if (hashMap.containsKey(a) &amp;&amp; hashMap.get(a) != i) &#123; return new int[]&#123;i, hashMap.get(a)&#125;; &#125; &#125; return null; &#125;&#125;]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spring boot 中使用mybatis整合druid数据库连接池]]></title>
    <url>%2F2019%2F09%2F29%2Fspring-boot-druid%2F</url>
    <content type="text"><![CDATA[数据库连接池:spring boot默认使用hikari,今天介绍Alibaba提供的开源数据库连接池druid.]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阅读清单]]></title>
    <url>%2F2019%2F09%2F26%2Fread-books%2F</url>
    <content type="text"><![CDATA[以下可能是今明后年的阅读计划,不知道自己的懒癌能否治疗….排序不分先后,随缘看 深入浅出设计模式 Head First Java HTTP权威指南 Java编程思想 Java并发编程实战 Java核心技术 卷I Java核心技术 卷II Redis设计与实现 Spring Boot实战(不好看/(ㄒoㄒ)/~~) Spring技术内幕 - 深入解析Spring架构与设计原理 Spring实战 深入理解Java虚拟机：JVM高级特性与最佳实践 图解HTTP]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
</search>
